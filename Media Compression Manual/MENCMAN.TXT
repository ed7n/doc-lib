Media Compression Manual u1r1 by Brendon, 11/14/2022.

0   0   0   1   "#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQ   6   7   7   8
1   5   9   3   RSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~!—    8   2   6   0


——Preface
Despite advancements in data storage solutions, data is still being compressed
to reduce bandwidth and space.

Uncompressed media files are huge. An hour of CD-quality audio measures about
606 MiB large, and a minute of standard-definition video can take well over 1
GiB.

Media--especially video--compression has been commonplace since the 1980s. In
1996, we were blessed with MPEG-2 fitting hours of video into one DVD. Digital
television (TV) also uses MPEG-2 to overcome bandwidth constraints of analog TV
without reallocating the radio spectrum. In the 2000s, MP3 was used to fit
hours, then days of music into our pockets.

This manual documents some of my knowledge on media compression. You do not have
to follow its recommendations, but take them as starting points to your liking.


——TOC: Contents
With the find/search function of your viewer, you can jump to a section by its
label followed by a colon ':'. For example, use "TOC:" to return here.

Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [TOC]
About Data Compression . . . . . . . . . . . . . . . . . . . . . . . . . . [A00]
  - Lossless . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [A01]
  - Lossy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [A02]
— Compression Level  . . . . . . . . . . . . . . . . . . . . . . . . . . . [A10]
— Rate Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [A20]
  - Constant Bitrate . . . . . . . . . . . . . . . . . . . . . . . . . . . [A21]
  - Variable Bitrate . . . . . . . . . . . . . . . . . . . . . . . . . . . [A22]
Audio Compression  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [B00]
— Opus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [B10]
— Vorbis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [B20]
— MPEG-4 Advanced Audio Coding (AAC) . . . . . . . . . . . . . . . . . . . [B30]
  - Google's Recommendations . . . . . . . . . . . . . . . . . . . . . . . [B31]
— MPEG-1/2 Audio Layer III (MP3) . . . . . . . . . . . . . . . . . . . . . [B40]
— MPEG-1 Audio Layer II (MP2)  . . . . . . . . . . . . . . . . . . . . . . [B50]
— Dolby Digital  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [B60]
  - AC-3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [B61]
  - Enhanced AC-3  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [B62]
— Windows Media Audio (WMA)  . . . . . . . . . . . . . . . . . . . . . . . [B70]
— Adaptive Transform Acoustic Coding (ATRAC) . . . . . . . . . . . . . . . [B80]
— Audio Recording  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [B90]
Video Compression  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [C00]
— MPEG-4 Advanced Video Coding (H.264) . . . . . . . . . . . . . . . . . . [C10]
  - Google's Recommendations . . . . . . . . . . . . . . . . . . . . . . . [C11]
— MPEG-4 Advanced Simple Profile (MPEG-4)  . . . . . . . . . . . . . . . . [C20]
— Theora . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [C30]
— VP8  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [C40]
— H.265, VP9, and AV1  . . . . . . . . . . . . . . . . . . . . . . . . . . [C50]
— Chroma Subsampling . . . . . . . . . . . . . . . . . . . . . . . . . . . [C60]
— Video Recording  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [C70]
Image Compression  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [D00]
— When To Use Lossy Compression? . . . . . . . . . . . . . . . . . . . . . [D10]
— JPEG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [D20]
— Portable Network Graphics (PNG)  . . . . . . . . . . . . . . . . . . . . [D30]
— Graphics Interchange Format (GIF)  . . . . . . . . . . . . . . . . . . . [D40]
— WebP and AVIF  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [D50]
Media Manipulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E00]
— Audio Manipulation . . . . . . . . . . . . . . . . . . . . . . . . . . . [E10]
  - Sampling Rate  . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E11]
  - Bitdepth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E12]
  - Channels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E13]
— Image Manipulation . . . . . . . . . . . . . . . . . . . . . . . . . . . [E20]
  - Colors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E21]
  - Resolution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [E22]
— Video Manipulation . . . . . . . . . . . . . . . . . . . . . . . . . . . [E30]
Credits  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [CRD]
License  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . [LCN]


——A00: About Data Compression
Data compression involves transcoding data with less bits than its original. Of
the many reasons why it is done, reduction of bandwidth and space is the most
important.

There are two classes of compression algorithms: lossless and lossy.

---—A01: Lossless
Lossless algorithms allow a verbatim reconstruction of the original data at the
cost of compression ratios. In some boundary cases, their outputs can be larger
than the original.

---—A02: Lossy
Lossy algorithms allow an approximated reconstruction of the original data by
irreversibly discarding its parts for higher compression ratios.

When a lossy medium is perceptually indistinguishable from its original, it is
said to be transparent. However, transcoding from it can turn detrimental. I
allow myself only once: from the original, transcoded, then transcoded again,
the last of which is reserved for temporary viewing purposes.


————A10: Compression Level
For lossy algorithms, the compression level affects their granularity of
approximation. Some data can be well reconstructed with a higher level of
approximation than others. For example, an image of a solid pink square can be
well reconstructed with little data, but the same amount can not reconstruct a
17th century Flemish engraving at any passing accuracy. Therefore, the optimal
compression level depends on the input.

For both lossless and lossy algorithms, the compression level affects the
transcoding time and efficiency.


————A20: Rate Control
In lossy compression of audio and video, bitrate--the number of bits per time
unit--is a parameter that determines the compression level.

There are two methods of controlling the bitrate: constant and variable.

---—A21: Constant Bitrate
Constant bitrate allocates the same number of bits to each time unit, such that
the bitrate stays throughout the stream. The compression level is fixed for all
units, and any remaining bits in each are stuffed. This can be repeated to
improve the consistency of approximation.

Constant bitrate is designed for fixed-rate transfers and playback. As such, the
prospective output size can be calculated by multiplying the bitrate by the
duration.

---—A22: Variable Bitrate
Variable bitrate allocates a different number of bits to each time unit, such
that the bitrate varies throughout the stream. The compression level is
dynamically adjusted to achieve some consistency of approximation.

The variation of bitrate can be further defined with at least two modes:
constant quality maintains the approximation level, while average bitrate
maintains the...average bitrate. The latter can be used to limit the output size
to a target based on the bitrate, but is not an equal substitute to constant
bitrate.


——B00: Audio Compression
Storing lossless audio does not seem as big as it was, and everyone should be
familiar with FLAC. This section is mainly for those distributing music over the
Internet for playback, or preparing thousands of them for casual listening. If
you are home, at a friend's house, or at work, you are better off listening to
CDs, tapes, their lossless backups, or studio masters--if you are lucky.

I am covering mainly 2-channel, 44.1 kHz or CD-quality audio.


————B10: Opus
Opus has superseded Vorbis and other competing formats at its time. It
incorporates technologies from Skype's SILK and Xiph.Org's CELT to provide an
open, multipurpose, low-latency audio format. It has since gained widespread
support, especially in the second half of the 2010s.

Here are my starting recommendations for Opus:

       Encoder:   libopus
  Rate Control:   Variable Bitrate
       Bitrate:   80 kbps
    Complexity:   10

Transparency can be achieved with at least 128 kbps.


————B20: Vorbis
Vorbis began as a project to develop an open, royalty-free alternative to MP3.
The result is an audio format with higher fidelity, especially at low bitrates.
Today, most software programs can play Vorbis.

By itself, Vorbis is commonly contained in an Ogg container, hence it is
commonly referred to as Ogg Vorbis.

Here are my starting recommendations for Vorbis:

       Encoder:   Aoyumi's Tuned Vorbis (aoTuV)
  Rate Control:   Constant Quality
       Quality:   2

Transparency can be achieved with at least quality 5.

Many programs use the libvorbis encoder. aoTuV is a modification of it that may
output slightly-better and -larger streams.


————B30: MPEG-4 Advanced Audio Coding (AAC)
AAC was collaboratively developed to succeed MP3. This is the choice of many for
its universality.

AAC encoding methods are organized into Object Types, of those I recommend
either Low Complexity (LC) or High Efficiency (HE) for music. Many portable
media players (in the past?) support only AAC-LC.

Here is a list of AAC encoders sorted by Hydrogenaudio recommendations:

  Encoder            | Comment
  ----------------------------
  Apple AAC            Shipped with Apple software.
  FhG AAC              Winamp.
  Fraunhofer FDK AAC   Cross-platform.
  Nero AAC             No longer being developed.
  FFmpeg               AAC-LC only. Cross-platform.
  FAAC                 AAC-LC only. Cross-platform.
  Libav                Experimental.

  [ https://wiki.hydrogenaud.io/index.php?title=AAC_encoders ]

It is crucial to know which encoder your program uses. If you are using Apple
software, then you are good to go. Otherwise, many should be using at least
FFmpeg's encoder, and may have an option to use Fraunhofer FDK AAC instead.

Here are my starting recommendations for AAC:

   Object Type:   LC
       Encoder:   Fraunhofer FDK AAC
  Rate Control:   Constant Bitrate
       Bitrate:   112 kbps

FDK AAC lacks a variable bitrate mode that averages at around 112 kbps. If you
want, the closest mode is 4 which averages at around 128 kbps.

Transparency can be achieved with at least 160 kbps.

---—B31: Google's Recommendations
For YouTube, here are Google's recommendations for AAC:

  Channels   | Bitrate (kbps)
  ---------------------------
  1 (Mono)     128
  2 (Stereo)   384
  5.1          512

  [ https://support.google.com/youtube/answer/1722171 ]

Their bitrates are much higher because they transcode your uploads to their own
for playback. Instead, export derivative works losslessly whenever possible.


————B40: MPEG-1/2 Audio Layer III (MP3)
Despite having been succeeded by AAC, MP3 remains popular in colloquialism,
Internet music distribution, and consumer audio equipment.

Here are my starting recommendations for MP3:

            Encoder:  LAME (libmp3lame)
       Rate Control:  Variable Bitrate
            Quality:  5
  Algorithm Quality:  0

Transparency can be achieved with at most quality 2.

For the bedrock of all hardware players, you may have to use constant bitrate:

  Rate Control:   Constant Bitrate
       Bitrate:   160 kbps

For maximum quality, use the following parameters:

  Rate Control:   Variable Bitrate
       Quality:   0

This outputs similar results to constant 320 kbps for less space.


————B50: MPEG-1 Audio Layer II (MP2)
MP3's subset remains in use for digital audio broadcasting. It is also the only
audio format for Video CDs. All MP3 players should play MP2, but not the other
way around. However, with the abundance of MP3, using MP2 brings no practical
benefit, save for special cases.

Here are my starting recommendations for MP2:

               Encoder:   TwoLAME (libtwolame)
          Rate Control:   Constant Bitrate
               Bitrate:   224 kbps
  Psychoacoustic Model:   4

While TwoLAME supports variable bitrate, its optionality makes it incompatible
with players.

Transparency can be achieved with at least 320 kbps.


————B60: Dolby Digital
Dolby Digital is a family of audio compression technologies. While there are
free software encoders of some of its audio formats, the best ones are kept to
patrons of Dolby Laboratories. If you still want free Dolby Digital, then read
on.

---—B61: AC-3
Formerly synonymous to Dolby Digital, AC-3 is the first of its kind, preceding
all other audio formats mentioned here. Debuted in theaters, it made its way to
home video, video games, broadcast television, but not Internet media.

Here are my starting recommendations for AC-3:

  Encoder:  FFmpeg
  Bitrate:  256 kbps

Transparency can be achieved with at least 448 kbps.


---—B62: Enhanced AC-3
Marketed as Dolby Digital Plus, Enhanced AC-3 is otherwise self explanatory.

Here are my starting recommendations for Enhanced AC-3:

  Encoder:  FFmpeg
  Bitrate:  224 kbps

Transparency can be achieved with at least 448 kbps.


————B70: Windows Media Audio (WMA)
WMA is Microsoft's take on the audio compression bandwagon in the late 1990s to
compete with MP3. Initially boastful for reaching "near CD-quality" at 64 kbps,
it was supported on some portable, car, and home audio equipment. With the lack
of cross-platform availability, there is virtually no reason to use WMA today.

There are several versions of WMA, including Professional, Lossless, and Voice.

My software infrastructure is no longer on Windows, and FFmpeg's encoder is a
far cry from Microsoft's, leaving me no other way than to recommend from memory:

        Format:   WMA2
       Encoder:   Microsoft
  Rate Control:   Constant Bitrate
       Bitrate:   128 kbps

There may be an option for variable bitrate.


————B80: Adaptive Transform Acoustic Coding (ATRAC)
ATRAC is Sony's foray into lossy audio compression from the early 1990s to
compete with AC-3 and DTS. It was then a staple of MiniDisc (MD), and later
supported on non-MD hardware to compete with MP3. Eventually, they gave up:
first by adding support for MP3 into their Network Walkmen, then by
discontinuing the format at around the turn of its second decade. Like WMA,
ATRAC lacks cross-platform availability, and is unsupported even on modern Sony
players.

Consumer versions include ATRAC, ATRAC3, ATRAC3plus, and ATRAC Advanced
Lossless. ATRAC 2, 3, 3.5, 4, 4.5, etc. are implementations of ATRAC, while
ATRAC3 is an incompatible upgrade to ATRAC.

At its current status, I recommend ATRAC only to players it is used in:

            MiniDisc | ATRAC CD
            -------------------
   Format:  ATRAC      ATRAC3plus
  Encoder:  Sony       Sony
  Bitrate:  132 kbps   256 kbps

These are the highest bitrates available to my players.

ATRAC3 is accessible via MiniDisc Long Play (MDLP) at up to 64 kbps. Why did
Sony not offer ATRAC3 at 132 kbps for MD is beyond me. ATRAC3plus at 256 kbps
can fit over five hours into a CD. It may work on players that supposedly do not
play ATRAC3plus at this bitrate.


————B70: Audio Recording
Record losslessly. This means to match with the input device's sampling rate and
bitdepth, and save in a lossless format like FLAC. This way, your verbatim
recordings will be virtually future-proof.


——C00: Video Compression
Videos come in all shapes and sizes, and are rarely distributed in lossless
formats. This section is not only for those distributing them over the Internet
for playback, but also for those wanting to make transparent, second-rate
archives.


————C10: MPEG-4 Advanced Video Coding (AVC/H.264)
Part of the MPEG-4 standard, this is still the choice of many for its
universality. There are countless devices that can both encode and decode H.264
at the hardware level.

Here are my starting recommendations for H.264:

       Encoder:   x264 (libx264)
  Rate Control:   Constant Rate Factor (CRF)
           CRF:   23
        Preset:   slow

Transparency can be achieved with at most CRF 18. A faster preset decreases the
encoding time and quality, which is a significant factor in real-time recording.
You may want to lower the CRF to compensate over the quality loss.

x264 has a lossless mode accessible with CRF 0, and RGB pixel formats--such as
screen recordings--can be preserved with libx264rgb.

If you are using 10-bit x264, then maybe multiply CRFs by `64 / 52` to transpose
them to its larger scale.

---—C11: Google's Recommendations
For YouTube, here are Google's recommendations for H.264:

             Profile:   High
        Rate Control:   Variable Bitrate
             Bitrate:   <see below>
  Chroma Subsampling:   4:2:0
  - 2 consecutive B frames.
  - Closed GOP. GOP of half the frame rate.
  - CABAC.

And the following bitrate table is for frame rates up to 30 fps:

  Resolution  | Bitrate (Mbps)
  ----------------------------
  4320p (8K)    80-160
  2160p (4K)    35-45
  1440p (2K)    16
  1080p (FHD)   8
  720p  (HD)    5
  480p  (SD)    2.5
  360p          1

For frame rates above 30 to 60 fps, multiply the bitrate by 1.5. For example,
for 1080p, it is 8 * 1.5 = 12 Mbps.

For HDR uploads, multiply the bitrate by 1.25. For example, for 1080p60, it is
12 * 1.25 = 15 Mbps. HDR is not supported at 480p and below.

  [ https://support.google.com/youtube/answer/1722171 ]


————C20: MPEG-4 Advanced Simple Profile (MPEG-4)
Superseded by H.264, it remains as a cheap solution but with larger storage
costs. Try it if H.264 is inaccessible.

Here are my starting recommendations for MPEG-4:

       Encoder:   Xvid (libxvid)
  Rate Control:   Constant Quantizer
     Quantizer:   4

Transparency can be achieved with at most quantizer 2.


————C30: Theora
Theora derived from On2's VP3 to develop an open, royalty-free video format
comparable to MPEG-4.

Here are my starting recommendations for Theora:

       Encoder:   libtheora
  Rate Control:   Constant Quantizer
     Quantizer:   7.5

Transparency can be achieved with the maximum quality of 10.


————C40: VP8
VP8 is another video format from On2 that has since been acquired by Google,
then freed as part of their WebM project. It is comparable to H.264.

Here are my starting recommendations for VP8:

           Encoder:   libvpx
      Rate Control:   Constrained Quality
           Quality:   30
  Encoding Quality:   Good
          CPU Used:   0

Transparency can be achieved with at most quality 8, which outputs much larger
streams than x264 achieving transparency with at most CRF 18.

----Original Recommendations for VP8
These are some of the earliest building blocks of this manual, staying here for
legacy reasons. Try them for smaller-sized, lower-quality videos:

  Rate Control:   Variable Bitrate
       Bitrate:   <see below>

The bitrate can be calculated with the following block of conditions:

1   Base bitrate
  a   If the aspect ratio is 16:9 (or wide), then use 4/3 the width.
  b   If the aspect ratio is 4:3 (or not wide), then use the width.

2   Motion bitrate
  a   If the frame rate is 48 or above, then use 4/3 the base bitrate.
  b   If the frame rate is 15 or below, then use 2/3 the base bitrate.
  c   Otherwise, use the base bitrate as is.

3   Application bitrate
  a   For emphasis on quality, use 3/2 the motion bitrate.
  b   Otherwise, use the motion bitrate as is.

And the application bitrate is the final bitrate in kbps.


————C50: H.265, VP9, and AV1
I am aware of successors H.265, VP9, and AV1. Try them if your hardware has the
processing power to match your patience--mine does not.

H.265 is officially known as MPEG-4 High Efficiency Video Coding (HEVC), VP9 is
the successor to VP8, and AV1 was developed by a consortium with parts of
individual projects.

Collectively, they are the "next generation" of video formats--soon to be
current, with AV1 posed to be the future standard.


————C60: Chroma Subsampling
The human eye has less spatial color resolution than that for luminosity. So,
color information are usually encoded at a lower resolution. This is referred to
as chroma subsampling. Common values include:

  Subsampling | Description
  -------------------------
  4:4:4         No subsampling
  4:2:2         Halved
  4:2:0         Quartered

I match the setting to that of the source; if the source is 4:2:0, then I use
4:2:0. MiniDV uses 4:1:1. If that is not possible, then I use either 4:4:4 or
4:2:2, so long as the chroma subsampling is more-or-less unaffected.


————C70: Video Recording
Unlike audio, lossless recording of videos is largely inaccessible due to its
storage space requirements. The next best solution is to record in a lossy
format transparently, for which I recommend using either your hardware H.264
encoder, x264 (section C10), or Xvid (section C20).


——D00: Image Compression
Image compression works similarly to that for videos, except on a single frame
only. In most cases, default compression settings should be fine.


————D10: When To Use Lossy Compression?
It occurred to me that some Photoshop people do not follow good exporting
practices. This section is written specifically for anyone under this field.

In most cases, a lossless export is recommended. A lossy export is more suitable
to:

1   Adhere within upload limits. Lossy compression is not the only solution, see
    section E20.

2   Distribute for viewing purposes only. Be sure to keep a lossless copy
    elsewhere for unforeseen uses.

(In)conveniently, many websites convert your image uploads to JPEG for web
viewing. Hence, attempt lossless uploads to preserve as much detail as possible.

Converting a lossy image to a lossless format, without anything in the middle,
is a waste of resources.


————D20: JPEG
JPEG is a lossy image compression format that is popular in colloquialism as
"J peg." JPEG is an acronym for Joint Photographic Experts Group.

I have no specific recommendations for JPEG as each software program uses its
own scales. Again, the defaults should be fine, but consider using the most
expensive options (requiring the most computational resources) to improve
efficiency. Common default quality percentiles range from 80 to 90.


————D30: Portable Network Graphics (PNG)
PNG is a lossless image compression format with support for transparency, and
later animation with APNG.

My only recommendation for PNG is to use the highest level of compression
available.

There are some smartphone programs--or apps--that let you take PNG pictures, but
keep in mind that doing so may take much longer than usual. Hence, it is ideal
only for photography-exclusive sessions. Do not forget to transfer the PNGs
afterwards as they take a lot of space. One such program for Android is
OpenCamera. Still, always check with the program and test each setting.


————D40: Graphics Interchange Format (GIF)
GIF, infamous for its support for meme-quality animation, also supports atomic
transparency. It can store up to 256 (8 bits) distinct colors for each frame.
Otherwise, it is lossless. Because of its inferior compression ratio, some
vendors convert them to videos prior to distribution.

I have no recommendations for GIF.


————D50: WebP and AVIF
WebP is a multipurpose image compression format developed by Google based on
VP8. It can do both lossy and lossless compression, and supports both
transparency and animation.

AV1 Image File Format (AVIF) is based on the "next generation" video formats
with features better than WebP. Like AV1, this could be the future standard
image format.

I am yet to play around both formats, but they should be better than those
mentioned above, as with the case with many video-based image formats.


——E00: Media Manipulation
Sometimes, media compression alone is not enough. You can further reduce the
size by manipulating the media itself.


————E10: Audio Manipulation

---—E11: Sampling Rate
Before anything, inspect your spectrograms.

Human speech becomes intelligible at 8 kHz (telephone), and music becomes
enjoyable at 32 kHz (FM radio). Full-fidelity audio is rated at 44.1 or 48 kHz.
192 kHz adds no benefit to humans. I use 22.05 kHz for regular AM radio and
microcassette recordings, 44.1 or 48 kHz otherwise.

---—E12: Bitdepth
24-bit adds no practical benefit to 16-bit, especially if you take dithering
into account. The common quiet listening environments do not allow the full
enjoyment of the theoretical ~96 dB dynamic range of 16-bit audio; it takes a
room of near-complete true-silence. Also, try A- or µ-law first for 8-bit
encoding.

---—E13: Channels
Human speech does not need to be stereophonic or beyond, unless positional
information is important. If the source audio is monaural, then encode it as
such. Multichannel audio can be downmixed into stereo with Dolby Pro Logic or
the like, but with some loss in quality.


————E20: Image Manipulation

---—E21: Colors
An important factor to image encoding is the color space. It is like defining
the set of colored pencils used recreate an image. Use the smallest color space
tolerable. A solid-color image should be encoded with only 1 color--or as little
as your image processor allows--instead of the usual 24-bit (16777216) colors.
Dithering gives the illusion of having more colors than the ones encoded by
blending two colors together. Programs such as pngquant can do all of these for
you.

---—E22: Resolution
Usually, hand-drawn diagrams do not need to be captured in HD. This ultimately
depends on the page size and stroke thickness. Smaller canvases and/or thicker
strokes require less resolution.

Some cameras needlessly upscale their images, such that downscaling them brings
virtually no difference. In this case, lower the resolution until a significant
degradation is observed.


————E30: Video Manipulation
Videos are composed of images playing at a certain frame rate accompanied with
audio. So most of the above still apply.

If you compose a video, use simple transitions, avoid as much motion as
possible, and never use particle effects. Noise reduction ("denoise") can
improve video compressibility by a notch, as Zoom can do to your video feeds.
Sometimes, even still shots can be noisy. So if you are sane, mask whatever is
supposed to be still with an image. You can see an example in
[ https://www.youtube.com/watch?v=Occ52IZVOh4 ] in which the surrounding portion
of its frames is completely static.


——CRD: Credits
I would like to thank the contributors of both the Hydrogenaudio Knowledgebase
and the FFmpeg Wiki. Parts of this manual were based on my readings of those
websites.


——LCN: License
Most of this work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
[ http://creativecommons.org/licenses/by-nc-sa/4.0 ] or send a letter to
Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

Parts adapted from the Hydrogenaudio Knowledgebase are licensed under the GNU
Free Documentation License 1.2.


——
End of MENCMAN.TXT
